%YAML 1.2
# Communication Command Language (CCL) for use with Apple Remote Access modem scripts
# https://web.archive.org/web/20030916190858/http://developer.apple.com/macos/opentransport/docs/dev/ARA_Modem_Scripting_Guide.pdf
#
# Copyright 2022 Vadhym Beauvoir
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: Apple Modem Script
first_line_match: ^(?i)(?:@(?:ORIGINATE|ANSWER)|!\s\s.*)$
scope: source.modemscript
variables:
  label: '120|12[1-8]|1[0-1][0-9]|[0-9]{2}|[0-9]'
  errors: '0|-60(?:0[2-9]|1[0-9]|2[0-6])'
  matchstr: '6[0-4]|[1-5]?[0-9]'
  varstr: '[1-9]'
  baud: '(?:3|12|24|48|96|144|192|288|384|576|1152)00'
  tries: '(?:DEC|INC)TRIES'
  oneshot: 'DTRCLEAR|DTRSET|FLUSH|LBREAK|MATCHCLR|SBREAK'
  oneparam: 'CHRDELAY|COMMUNICATINGAT|MATCHREAD|PAUSE|SETSPEED|SETTRIES'

contexts:
  end-of-line:
    - match: '$'
      pop: true

  escape-character:
    - match: '\\(?:[0-9][0-9]|[\\\^])'
      scope: constant.character.escape.backslash.modemscript

  variable-string:
    - match: '(\^[1-9*])'
      scope: variable.language.modemscript

  comments:
    - match: '!'
      scope: punctuation.definition.comment.modemscript
      push:
        - meta_scope: comment.line.exclamation.modemscript

  labels:
    - match: '({{label}})\b'
      scope: variable.annotation.modemscript

  strings:
    - include: string-quoted
    - include: string-unquoted

  string-quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.modemscript
      push:
        - meta_scope: string.quoted.modemscript
        - include: variable-string
        - include: escape-character
        - match: '"'
          scope: punctuation.definition.string.end.modemscript
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.modemscript
      push:
        - meta_scope: string.quoted.modemscript
        - include: variable-string
        - include: escape-character
        - match: "'"
          scope: punctuation.definition.string.end.modemscript
          pop: true

  string-unquoted:
    - match: '\s+[a-zA-Z0-9-_]+(?=[\t,;])'
      scope: string.unquoted.modemscript

  strings-labels:
    - include: strings
    - match: '(?=\s+{{label}})'
      set: labels

  # Script support builtins
  string-matching:
    # Use varStrings as parameters
    # 1 through 9 have a value except 5 (Apple says for future use)
    - match: '^(?i)IFSTR\b'
      scope: keyword.control.conditional.modemscript
      push:
        - match: '\s+{{varstr}}\s+(?={{label}})'
          scope: support.constant.modemscript
          push:
            - include: labels
            - include: strings
    # Use CCL buffer as parameters
    # Buffer can hold up to 64 strings
    - match: '^(?i)MATCHSTR\b'
      scope: support.function.builtin.modemscript
      push:
        - match: '\s+{{matchstr}}\s+(?={{label}})'
          scope: variable.parameter.modemscript
          push:
            - include: labels
            - include: strings
          
  dialog:
    # Include labels optionally
    - match: '^(?i)ASK\b'
      scope: support.function.builtin.modemscript
      push:
        - match: \s+([0-2])\b
          scope: variable.parameter.modemscript
          push: strings-labels

  logging:
    - match: '^(?i)NOTE\b'
      scope: support.function.builtin.modemscript
      push:
        - include: strings
        - match: '\s+([1-3])\b'
          scope: variable.parameter.modemscript

  exit:
    - match: '^(?i)EXIT\b'
      scope: support.function.builtin.modemscript
      push:
        - match: '\s+(-6002)\b'
          scope: variable.parameter.modemscript
          set: strings
        - match: '\s+({{errors}})\b'
          scope: variable.parameter.modemscript

  jump-controls:
    - match: '^(?i)(JSR|JUMP)\b'
      scope: keyword.control.modemscript
      set: labels
    - match: '^(?i)IF(?:ANSWER|ORIGINATE)\b'
      scope: keyword.control.conditional.modemscript
      set: labels
    - match: '^(?i)IFTRIES\b'
      scope: keyword.control.conditional.modemscript
      push:
        - match: \s+\d+\s+(?={{label}})
          scope: constant.numeric.integer.modemscript
          set: labels
    - match: '^(?i)RETURN\b'
      scope: keyword.control.modemscript

  entry-points:
    - match: '^@'
      push:
        - meta_scope: punctuation.definition.annotation.modemscript
        - match: '(?i)\b(ORIGINATE|ANSWER|HANGUP)\b'
          scope: storage.type.label keyword.declaration.label
        - match: '(?i)\bLABEL\b'
          scope: storage.type.label keyword.declaration.label
          set: labels

  # Modem functions and parameters
  baud-rate:
    - match: '\s+{{baud}}(?=,)'
      scope: variable.parameter.modemscript
      set: parity

  parity:
    - match: '\s+[0-3](?=,)'
      scope: variable.parameter.modemscript
      set: data-bits

  data-bits:
    - match: '\s+[5-8](?=,)'
      scope: variable.parameter.modemscript
      set: stop-bits

  stop-bits:
    - match: '\s+[1-3]\b'
      scope: variable.parameter.modemscript

  serial-comm:
    - match: '^(?i)WRITE\b'
      scope: support.function.builtin.modemscript
      set: strings
    - match: '^(?i)USERHOOK\b'
      scope: support.function.builtin.modemscript
      push:
        - match: '\s+[1-4]\b'
          scope: variable.parameter.modemscript
    - match: '^(?i)HSRESET\b'
      scope: support.function.builtin.modemscript
      push:
        - match: '(?:\s+[01]){6}$'
          scope: variable.parameter.modemscript
    - match: '^(?i)SERRESET\b'
      push:
        - meta_scope: support.function.builtin.modemscript
        - match: '(?=\s+{{baud}},)'
          push: baud-rate

  # Main context
  prototype:
    - include: end-of-line

  main:
    - include: comments
    - include: dialog
    - include: logging
    - include: exit
    - include: serial-comm
    - include: jump-controls
    - include: entry-points
    - include: string-matching

    - match: '^(?i)({{oneparam}}) (\d+)'
      captures:
        1: support.function.builtin.modemscript
        2: constant.numeric.integer.modemscript
    - match: '^(?i){{tries}}\b'
      scope: keyword.operator.assign
    - match: '^(?i){{oneshot}}\b'
      scope: support.function.builtin.modemscript
